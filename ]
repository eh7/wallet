pragma solidity ^0.4.23;

import "./LottoPlay.sol";

contract LottoDraw is LottoPlay {

  event NewLottoDraw(uint lottoId, uint8[6] numbers); 
  event LottoWinner(uint lottoId, address winner, uint winnerLottoTurnId); 
  event ThisLottoTurn(uint lottoId, uint winnerTurnId); 

//  LottoTurn public winningLottoTurn;

  function getTurn(uint _lottoId, uint _turnId) public pure returns (uint lottoTurnId) {
    emit LottoTurn(_lottoId, _turnId);
  }

  function doLottoDraw(uint _lottoId) public {
    uint8[6] memory numbers;
    numbers = [uint8(1),uint8(2),uint8(3),uint8(4),uint8(5),uint8(6)];
    emit NewLottoDraw(_lottoId, numbers); 

    address winner = msg.sender;
    uint winnerLottoTurnId = lottoTurns.length;

//LottoWinnerChecks(lottoTurns[0]);
//    for(uint i=0; i<lottoTurns.length; i) {
//      LottoWinnerChecks(lottoTurns[i]);
//    }

    emit LottoWinner(_lottoId,winner,winnerLottoTurnId);

/*
    uint timestamp = now;
    uint endTimestamp = timestamp + _duration;
    Lotto memory lotto = lottos[_lottoId];
    emit NewLottoGame(_lottoId, lotto.name, lotto.timestamp, endTimestamp); 
*/
  }

}

